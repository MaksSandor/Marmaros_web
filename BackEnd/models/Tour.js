const mongoose = require("mongoose");

const commentSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  text: String,
  createdAt: { type: Date, default: Date.now },
});

// üî∏ –ê–ª—å–±–æ–º (–æ–∫—Ä–µ–º–∏–π –º–∞—Å–∏–≤ —Ñ–æ—Ç–æ)
const galleryAlbumSchema = new mongoose.Schema({
  title: { type: String, required: true },       // –Ω–∞–∑–≤–∞ –∞–ª—å–±–æ–º—É: "–î–µ–Ω—å 1", "–ó–∏–º–∞", "SPA" —Ç–æ—â–æ
  photos: [{ type: String, required: true }],    // —à–ª—è—Ö–∏ —Ç–∏–ø—É "/uploads/gallery/xxx.jpg"
}, { _id: true }); // –∑–∞–ª–∏—à–∞—î–º–æ _id, —â–æ–± –∑—Ä—É—á–Ω–æ –ø–æ—Å–∏–ª–∞—Ç–∏—Å—è –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö

const tourSchema = new mongoose.Schema({
  name: { type: String, required: true },
  img: { type: String },
  mp4: { type: String },
  price: { type: Number, required: true },
  old_price: { type: Number },
  freePlaces: { type: Number },
  maxPlaces: { type: Number },
  about: { type: String },
  new: { type: Boolean, default: false },
  special: { type: String, enum: ["5days", "excursion", "ski", "newYear", "festive"] },
  date: { firstDay: String, lastDay: String, countDays: Number },
  locate: String,
  food: String,
  startPlace: String,
  program: String,
  addedPay: String,
  Hotel: String,
  keyWords: [String],
  anotherInf: String,

  // üñºÔ∏è –°—Ç–∞—Ä–µ –ø–æ–ª–µ (—è–∫—â–æ –±—É–ª–æ): Gallery: [String]
  // üî∏ –ù–û–í–ï: –º–∞—Å–∏–≤ –∞–ª—å–±–æ–º—ñ–≤
  galleries: [galleryAlbumSchema],

  comments: [commentSchema],
}, { timestamps: true });

module.exports = mongoose.model("Tour", tourSchema);
